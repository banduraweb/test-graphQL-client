{"version":3,"sources":["serviceWorker.ts","sections/Listings/components/ListingsSceleton/ListingsSceleton.tsx","sections/Listings/components/ListingModalInfo/ListingModalInfo.tsx","sections/Listings/Listings.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","ListingsSkeleton","title","alertError","error","type","message","skeleton","Array","keys","map","item","key","className","active","paragraph","rows","ListingModalInfo","modal","closeModal","additionalInfo","centered","visible","onOk","onCancel","footer","Item","Meta","description","address","avatar","src","image","shape","size","numOfBeds","rating","price","LISTINGS","gql","DELETE_LISTING","Listings","useState","id","numOfGuests","numOfBaths","__typename","setMoreInfo","useQuery","data","loading","refetch","useMutation","deleteListings","deleteLoading","deleteError","handleDeleteListings","a","variables","listings","listingsList","itemLayout","dataSource","renderItem","listing","actions","onClick","DeleteOutlined","spinning","client","ApolloClient","uri","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.95df19c0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport { Skeleton, Divider, Alert } from 'antd';\r\nimport './styles/ListingSceleton.scss'\r\n\r\n\r\ninterface Props {\r\n\ttitle: string;\r\n\terror?: boolean;\r\n}\r\n\r\n\r\nexport const ListingsSkeleton = ({ title, error }: Props) => {\r\n\r\n\tconst alertError = error ? (\r\n\t\t<Alert type='error'\r\n\t\t\t\t\t message=\"Uh oh! Something went wrong - please try again later :(\"/>\r\n\t) : null;\r\n\r\n\tconst skeleton: JSX.Element[] = [...Array(4).keys()].map(item => (\r\n\t\t<div key={item} className=\"listings__skeleton\">\r\n\t\t\t<Skeleton active paragraph={{ rows: 1 }}/>\r\n\t\t\t<Divider/>\r\n\t\t</div>\r\n\t));\r\n\r\n\treturn <>\r\n\t\t{alertError}\r\n\t\t<h2>{title}</h2>\r\n\t\t{skeleton}\r\n\t</>;\r\n};\r\n","import React from 'react';\r\nimport { Avatar, List, Modal } from 'antd';\r\nimport './style/index.scss';\r\nimport { Listings_listings } from '../../__generated__/Listings';\r\n\r\n\r\ninterface IModal {\r\n\tvisible: boolean;\r\n\tadditionalInfo: Listings_listings;\r\n}\r\n\r\ninterface IProps {\r\n\tmodal: IModal;\r\n\tcloseModal: () => void\r\n}\r\n\r\nexport const ListingModalInfo = ({ modal, closeModal }: IProps) => {\r\n\r\n\tconst { additionalInfo } = modal;\r\n\r\n\treturn (\r\n\t\t<Modal\r\n\t\t\ttitle={additionalInfo.title}\r\n\t\t\tcentered\r\n\t\t\tvisible={modal.visible}\r\n\t\t\tonOk={() => closeModal()}\r\n\t\t\tonCancel={() => closeModal()}\r\n\t\t\tfooter={null}\r\n\r\n\t\t>\r\n\t\t\t<List.Item>\r\n\t\t\t\t<List.Item.Meta\r\n\t\t\t\t\ttitle={additionalInfo.title}\r\n\t\t\t\t\tdescription={additionalInfo.address}\r\n\t\t\t\t\tavatar={<Avatar src={additionalInfo.image} shape=\"square\" size={130}/>}\r\n\t\t\t\t/>\r\n\r\n\r\n\t\t\t</List.Item>\r\n\r\n\t\t\t<h5>numOfBeds : {additionalInfo.numOfBeds}</h5>\r\n\t\t\t<h5>rating : {additionalInfo.rating}</h5>\r\n\t\t\t<h5>price: {additionalInfo.price}</h5>\r\n\r\n\t\t</Modal>\r\n\t);\r\n};","import React, { useState } from 'react';\r\nimport {gql} from 'apollo-boost'\r\nimport { useQuery, useMutation} from 'react-apollo';\r\nimport { Listings as ListingsData, Listings_listings } from './__generated__/Listings';\r\nimport { DeleteListings as DeleteListingsData, DeleteListingsVariables } from './__generated__/DeleteListings';\r\nimport { ListingsSkeleton, ListingModalInfo } from './components';\r\nimport { List, Avatar, Button, Spin, Alert } from 'antd';\r\nimport {\r\n  DeleteOutlined\r\n} from '@ant-design/icons';\r\nimport './styles/Listings.scss';\r\n\r\nconst LISTINGS = gql`\r\n  query Listings {\r\n    listings {\r\n      id\r\n      title\r\n      image\r\n      address\r\n      price\r\n      numOfGuests\r\n      numOfBeds\r\n      numOfBaths\r\n      rating\r\n    }\r\n  }\r\n`;\r\n\r\nconst DELETE_LISTING = gql`\r\n  mutation DeleteListings($id: ID!) {\r\n    deleteListings(id: $id) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\n\r\ninterface State {\r\n  visible: boolean;\r\n  additionalInfo: Listings_listings;\r\n}\r\n\r\n\r\nexport const Listings = () => {\r\n\r\n\r\n  const [modal, setMoreInfo] = useState<State>({\r\n    visible: false,\r\n    additionalInfo: {\r\n      id: '',\r\n      title: '',\r\n      image: '',\r\n      address: '',\r\n      price: 0,\r\n      numOfGuests: 0,\r\n      numOfBeds: 0,\r\n      numOfBaths: 0,\r\n      rating: 0,\r\n      __typename: \"Listing\"\r\n    }\r\n  });\r\n\r\n\r\n  const { data, loading, refetch, error } = useQuery<ListingsData>(LISTINGS);\r\n  const [deleteListings,\r\n    { loading: deleteLoading, error: deleteError }\r\n  ] = useMutation<DeleteListingsData, DeleteListingsVariables>(DELETE_LISTING);\r\n\r\n  const handleDeleteListings = async (id: string) => {\r\n    await deleteListings({ variables: { id } });\r\n    refetch();\r\n  };\r\n\r\n  const handleShowMoreInfo = (hotel: Listings_listings) => {\r\n    setMoreInfo({\r\n      visible: true,\r\n      additionalInfo: hotel\r\n    });\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setMoreInfo({\r\n      visible: false,\r\n      additionalInfo: {\r\n        id: '',\r\n        title: '',\r\n        image: '',\r\n        address: '',\r\n        price: 0,\r\n        numOfGuests: 0,\r\n        numOfBeds: 0,\r\n        numOfBaths: 0,\r\n        rating: 0,\r\n        __typename: \"Listing\"\r\n      }\r\n    });\r\n  };\r\n\r\n\r\n  const listings = data ? data.listings : null;\r\n  const listingsList = listings ? (\r\n  <List itemLayout=\"horizontal\"\r\n        dataSource={listings}\r\n        renderItem={listing => (\r\n          <List.Item actions={[<Button\r\n            onClick={() => handleShowMoreInfo(listing)}\r\n            type=\"primary\">More info\r\n          </Button>,\r\n            <Button\r\n              type=\"danger\"\r\n              onClick={() => handleDeleteListings(listing.id)}>\r\n              <DeleteOutlined/>\r\n            </Button>]}>\r\n            <List.Item.Meta\r\n              title={listing.title}\r\n              description={listing.address}\r\n              avatar={<Avatar src={listing.image} shape=\"square\" size={64}/>}\r\n            />\r\n          </List.Item>\r\n        )}\r\n\r\n  />\r\n) : null;\r\n\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"listings\">\r\n        <ListingsSkeleton title=\"Fetching Hotel list...\"/>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"listings\">\r\n        <ListingsSkeleton title=\"Fetching Hotel list...\" error/>\r\n      </div>\r\n    );\r\n\r\n  }\r\n\r\n  const alertError = deleteError ? (\r\n    <Alert type='error'\r\n           message=\"Uh oh! Something went wrong - please try again later :(\"/>\r\n  ) : null;\r\n\r\n\r\n  return (\r\n   <div className=\"listings\">\r\n     <Spin spinning={deleteLoading}>\r\n       <h2>Hotel list</h2>\r\n       {alertError}\r\n     {listingsList}\r\n       <ListingModalInfo modal={modal} closeModal={closeModal}/>\r\n\r\n     </Spin>\r\n    </div>\r\n   )\r\n};","import React from 'react';\nimport {render} from 'react-dom';\nimport ApolloClient from 'apollo-boost';\nimport {ApolloProvider} from 'react-apollo';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/index.css'\nimport {Listings} from './sections'\n\n\nconst client = new ApolloClient({\n  uri: \"https://floating-citadel-42286.herokuapp.com/api\"\n});\n\n\nrender(\n\n    <ApolloProvider client={client}>\n    <Listings />\n    </ApolloProvider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}